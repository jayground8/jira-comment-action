name: 'Jira Commenter'
description: 'Adds a comment to a Jira issue with commit information.'

inputs:
  jira_user_email:
    description: 'Email of the Jira user for authentication.'
    required: true
  jira_api_key:
    description: 'API key for the Jira instance.'
    required: true
  jira_instance:
    description: 'URL of the Jira instance.'
    required: true
  issue_key_prefix:
    description: 'A comma-separated list of prefixes for Jira issue keys'
    required: false
  commit_url_base:
    description: 'The base URL for constructing commit URLs (e.g., https://your-git-server.com). If not provided, defaults to github.server_url.'
    required: false

runs:
  using: 'composite'
  steps:
    # This step checks out the repository's code so the action can access the git history.
    - uses: actions/checkout@v4
      with:
        # Fetch all history for all branches and tags
        fetch-depth: 0

    - name: Process commits and post to Jira
      run: |
        BEFORE_SHA="${{ github.event.before.sha }}"
        AFTER_SHA="${{ github.event.after.sha }}"

        # Get all commit hashes, author names, subjects, and full messages between BEFORE_SHA and AFTER_SHA
        # Format: <hash>%n<author>%n<subject>%n<body> (using %B for full message including subject)
        # Use --no-merges to avoid processing merge commits if they don't contain direct changes
        COMMIT_DETAILS=$(git log --pretty=format:"%H%n%an%n%s%n%B" --no-merges "$BEFORE_SHA".."$AFTER_SHA")

        # Read issue_key_prefix from inputs
        ISSUE_KEY_PREFIX="${{ inputs.issue_key_prefix }}"

        # Convert comma-separated prefixes into a regex OR pattern, e.g., "PROJ,TEST" -> "(PROJ|TEST)"
        if [[ -n "$ISSUE_KEY_PREFIX" ]]; then
          PREFIX_REGEX=$(echo "$ISSUE_KEY_PREFIX" | tr ',' '|' | sed -e 's/^/(/' -e 's/$/)/')
        else
          PREFIX_REGEX=""
        fi

        # Split commit details and process each commit
        IFS=
\n' read -d '' -r -a COMMITS <<< "$COMMIT_DETAILS"

        for (( i=0; i<${#COMMITS[@]}; i+=4 )); do
          COMMIT_HASH="${COMMITS[i]}"
          COMMITTER_USERNAME="${COMMITS[i+1]}"
          COMMIT_SUBJECT="${COMMITS[i+2]}"
          COMMIT_MESSAGE="${COMMITS[i+3]}" # This will be the full message including subject

          if [[ -n "${{ inputs.commit_url_base }}" ]]; then
            COMMIT_URL="${{ inputs.commit_url_base }}/${{ github.repository }}/commit/$COMMIT_HASH"
          else
            COMMIT_URL="${{ github.server_url }}/${{ github.repository }}/commit/$COMMIT_HASH"
          fi

          JIRA_ISSUE_KEY=""
          if [[ -n "$PREFIX_REGEX" ]]; then
            JIRA_ISSUE_KEY=$(echo "$COMMIT_MESSAGE" | grep -oE "${PREFIX_REGEX}-[0-9]+" | head -n 1)
          fi

          if [[ -n "$JIRA_ISSUE_KEY" ]]; then
            echo "Found Jira issue key: $JIRA_ISSUE_KEY for commit $COMMIT_HASH"
            # Execute main.sh for each relevant commit
            $GITHUB_ACTION_PATH/main.sh \
              "$JIRA_USER_EMAIL" \
              "$JIRA_API_KEY" \
              "$JIRA_INSTANCE" \
              "$JIRA_ISSUE_KEY" \
              "$COMMITTER_USERNAME" \
              "$COMMIT_MESSAGE" \
              "$COMMIT_URL" \
              "$REPOSITORY_NAME"
          else
            echo "No Jira issue key found for commit $COMMIT_HASH"
          fi
        done
      shell: bash
      env:
        JIRA_USER_EMAIL: ${{ inputs.jira_user_email }}
        JIRA_API_KEY: ${{ inputs.jira_api_key }}
        JIRA_INSTANCE: ${{ inputs.jira_instance }}
        REPOSITORY_NAME: ${{ github.repository }}
